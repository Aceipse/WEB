@model Obligatorisk1.Viewmodels.CreateComponentViewmodel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm("Create","Components",FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Component</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Component.ComponentName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Component.ComponentName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Component.ComponentName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Component.Category, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Component.CategoryId, new SelectList(ViewBag.Categories, "Id", "Value"))
                @*@Html.EditorFor(model => model.Category.Value, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.Component.Category, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Component.ComponentInfo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Component.ComponentInfo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Component.ComponentInfo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Component.Datasheet, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Component.Datasheet, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Component.Datasheet, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Component.Image, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                <input type="file" name="Image"/>
                @Html.ValidationMessageFor(model => model.Component.Image, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Component.ManufacturerLink, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Component.ManufacturerLink, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Component.ManufacturerLink, "", new {@class = "text-danger"})
            </div>
        </div>
        <div id="specificComponentsTable"></div>
        <div class="form-group">
            @Html.LabelFor(model => model.Component.SpecificComponent, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="number" id="componentNumber"/>
                <input type="text" id="serieNumber"/>
                <textarea hidden name="SpecificComponentListAsJson" id="specificComponentId"></textarea>
                <input type="button" onclick="addSpecificComponent()" value="Add"/>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<script>
    var specificComponentArray = [];
    var addSpecificComponent=function() {
        var currentComponentNumber = $("#componentNumber").val();
        var currentSerieNumber = $("#serieNumber").val();
        specificComponentArray.push({ComponentNumber:currentComponentNumber,SerieNr:currentSerieNumber,LoanInformation:null});
        createSpecificTable();
    }
    var deleteSpecific=function(indexOfElement) {
        specificComponentArray.splice(indexOfElement, 1);
        createSpecificTable();
    }
    var createSpecificTable = function () {
        $("#specificComponentId").val(JSON.stringify(specificComponentArray));
        var tableHtml = "<div class='container'>";
        for (var i = 0; i < specificComponentArray.length; i++) {
            tableHtml += "<div class='row'>" +
                "<div class='col-md-4'>" + specificComponentArray[i].ComponentNumber + "</div>" +
                "<div class='col-md-4'>" + specificComponentArray[i].SerieNr + "</div>" +
                "<div class='col-md-4'><button onclick='deleteSpecific(" + i + ")' type='button'>Delete specific</button></div></div>";
        }
        tableHtml += "</div>";
        $("#specificComponentsTable").html(tableHtml);
    }
</script>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
